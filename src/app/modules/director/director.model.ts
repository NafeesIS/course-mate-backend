/* eslint-disable camelcase */
import { Schema, model } from 'mongoose';
import {
  TCompanyData,
  TCompanySignatory,
  TDirector,
  TDirectorAddress,
  TMcaSignatoryCessationMasterHistory,
} from './director.interface';

const companyDataSchema = new Schema<TCompanyData>(
  {
    ucin: String,
    din: String,
    cin_LLPIN: String,
    nameOfTheCompany: String,
    emailAddress: String,
    role: String,
    roleEffectiveDate: String,
    cessationDate: String,
    directorFlag: String,
    designation: String,
    accountType: String,
    dinAllocationDate: String,
    bodyCorporateType: String,
    profitSharingPercentage: String,
    drivingLicenseNumber: String,
    occupationType: String,
    citizenOfIndia: String,
    bodyCorpOutsideIndiaIDNum: String,
    authorizationStatus: String,
    companyStatus: String,
    bodyCorpInsideIndiaIDNum: String,
    recordCreatedDate: String,
    userName: String,
    companyType: String,
    userId: String,
    dinSurrenderDate: String,
    roleLICValue: String,
    bodyCorpOutsideIndiaId: String,
    middleName: String,
    firstName: String,
    bodyCorpOutsideIndiaName: String,
    companyClass: String,
    residentOfIndia: String,
    fathersLastName: String,
    opcType: String,
    monetaryContributionValue: String,
    companyOrigin: String,
    v2UserId: String,
    pan: String,
    fathersMiddleName: String,
    migrationFlag: String,
    passportNumber: String,
    approverId: String,
    personType: String,
    flagged: String,
    mobileNumber: String,
    fllpDesignation: String,
    companyId: String,
    fathersFirstName: String,
    directorCategory: String,
    nationality: String,
    directorDeathDate: String,
    oldFlag: String,
    srn: String,
    dob: String,
    membershipNumber: String,
    contributionForm: String,
    sboFlag: String,
    bodyCorpInsideIndiaId: String,
    migrationDate: String,
    educationalQualification: String,
    otherOccupation: String,
    compAccountType: String,
    bodyCorpInsideIndiaName: String,
    occupation: String,
    signatoryAssociationStatus: String,
    gender: String,
    isDisqualified: String,
    obligationContribution: String,
    recordUpdatedDate: String,
    shareholdingPercentage: String,
    birthPlace: String,
    opcFlag: String,
    othersEducationalQualification: String,
    lastName: String,
    currentDesignationDate: String,
  },
  { _id: false }
);

const companySignatorySchema = new Schema<TCompanySignatory>(
  {
    middleName: String,
    appointmentDate: String,
    dinSurrenderDate: String,
    companyName: String,
    pan: String,
    cessationDate: String,
    lastName: String,
    cin: String,
    firstName: String,
    accountId: String,
    accountType: String,
    isDisqualified: String,
    din: String,
    designation: String,
    virtueofSharesFlag: String,
    virtueofDistributableDividendFlag: String,
    directorId: String,
    virtueofVotingRightsShares: String,
    personType: String,
    virtueofVotingRightsSharesFlag: String,
    virtueofDistributableDividend: String,
    companyOrigin: String,
    membershipNumber: String,
    virtueofShares: String,
    declarationDate: String,
    directSBOHolding: String,
    flagged: String,
    virtueofExerciseControlFlag: String,
    passportNumber: String,
    declarationReceiptDate: String,
    virtueofSignificantInfluenceFlag: String,
  },
  { _id: false }
);

const mcaSignatoryCessationMasterHistorySchema = new Schema<TMcaSignatoryCessationMasterHistory>(
  {
    cessationDate: String,
    designation: String,
    appointmentDate: String,
    din: String,
    accountName: String,
    cin: String,
  },
  { _id: false }
);

const directorAddressSchema = new Schema<TDirectorAddress>(
  {
    addressLine1: String,
    addressLine2: String,
    city: String,
    state: String,
    pincode: String,
  },
  { _id: false }
);

const directorSchema = new Schema<TDirector>({
  DIR3KYCFiledFY: String,
  DIR3KYCFiledFlag: String,
  aadhaarNumber: String,
  accountId: String,
  areaOfOccupation: String,
  authorizedRepType: String,
  birthPlace: String,
  citizenOfIndia: String,
  companyData: [companyDataSchema],
  companySignatory: [companySignatorySchema],
  createdAt: Date,
  createdOn: String,
  din: String,
  dinAllocationDate: String,
  dinSurrenderDate: String,
  directorDeathDate: String,
  directorDisqualified: String,
  directorFlag: String,
  disqualificationDate: String,
  disqualificationReason: String,
  disqualificationRemovalDate: String,
  disqualificationSection: String,
  dob: String,
  drivingLicenseNumber: String,
  durationofStay: String,
  educationalQualification: String,
  emailAddress: String,
  fathersFirstName: String,
  fathersLastName: String,
  fathersMiddleName: String,
  firstName: String,
  gender: String,
  kmpFlag: String,
  lastName: String,
  mcaSignatoryCessationMasterHistory: [mcaSignatoryCessationMasterHistorySchema],
  membershipNumber: String,
  middleName: String,
  migrationDate: String,
  migrationFlag: String,
  mobileNumber: String,
  nationality: String,
  occupation: String,
  occupationType: String,
  oidFlag: String,
  opcFlag: String,
  opcType: String,
  otherOccupation: String,
  othersEducationalQualification: String,
  pan: String,
  passportNumber: String,
  personType: String,
  personalContact: String,
  residentOfIndia: String,
  sameAddressFlag: String,
  status: String,
  surrenderDeactivationReason: String,
  updatedAt: Date,
  updatedOn: String,
  verificationStatus: String,
  votersIdNumber: String,
  whetherKYCBatchProcessed: String,
  fullName: String,
  addresses: [directorAddressSchema],
  contactUpdated: Date,
  hideContactInfo: Boolean,
});

const oldDirectorSchemaWithContactSchema = new Schema({
  ID: String,
  directorData: [directorSchema],
});

export const DirectorModel = model<TDirector>('director_data', directorSchema, 'director_data');
export const OldDirectorWithContactModel = model(
  'director_API',
  oldDirectorSchemaWithContactSchema,
  'director_API'
);
